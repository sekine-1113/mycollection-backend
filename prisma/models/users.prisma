model User {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique @default(uuid()) @map("public_id")
  email       String   @unique
  username    String
  firebaseUid String   @unique @map("firebase_uid")
  roleId      Int      @map("role_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  role    UserRole       @relation(fields: [roleId], references: [id])
  profile UserProfile?
  deleted DeletedUser?
  logins  UserLoginLog[]

  posts   Post[]
  reports Report[]
  contacts Contact[]

  @@map("user")
}

model UserRole {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(uuid()) @map("public_id")
  name     String

  user User[]

  @@map("user_role")
}

model UserProfile {
  userId      Int     @unique @map("user_id")
  iconUrl     String  @map("icon_url")
  displayName String  @map("display_name")
  isPublic    Boolean @default(true) @map("is_public")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

model DeletedUser {
  firebaseUid    String      @unique @map("firebase_uid")
  deletedAt DateTime @default(now()) @map("deleted_at")

  user User @relation(fields: [firebaseUid], references: [firebaseUid], onDelete: Cascade)

  @@map("deleted_user")
}

model UserLoginLog {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  loggedInAt DateTime @default(now()) @map("logged_in_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_login_log")
}
